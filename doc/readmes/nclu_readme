To see synopsis of the program run ./bin/nclu


REQUIRED ARGUMENTS:
-i <inputFile>:
	path to the input file (see below for input file format and description)
-m n(number of domains) m1 m2...mn:
	first type the number of domains (for bi-clustering this is 2) 
	next type the minimum number of elements required in each concept to call it a bi-cluster
	to enumerate all concepts as bi-clusters simply type 1 1 etc.
	
OPTINAL ARGUMENTS:
-l lrnr:
	specify the learner context (only applicable when doing n >= 3 clustering)
-o <filename>:
	this tells the program to output the clusters to the specified file
	two files will be generated
	filename.concepts and filename.concepts.names
	the first file only contains the bi-clusters as integer indices
	filename.concepts.names contains the bi-clusters with the actual names of objects
-k <k> :
	only enumerate the top k bi-clusters. In this case other parameters may have to be input
		depending on how top clusters should be ranked
-beta <0-1>:
	If using top k ranking and beta balanced area should be used to rank bi-clusters, then enter value of beta between 0 and 1
-ovlp <0-1>:
	If using top k ranking then you must specify the maximum allowable overlap so that the  the top k bi-clusters will be ranked
	as those not exceeding the overlap threshold AND maximizing the quality criterion.
-prog
	set this option if you would like view progress of the algorithm
	
DEFAULTS:
	-First context is always considered the learner.
	-First listed domain of the learner is what is used to construct prefix tree and maxmods.
		(In the case of bi-clustering it is then much more efficient to make the first domain
		  the domain with the fewer objects. In n >= 3 clustering, this cannot be controlled 
		  because we have to construct the prefix tree according to the articulation domain)
	-If top k is selected then the ranking function is area with default ovlp set to 0.25
	
	

INPUT FILE FORMAT:

The input file should follow this strict format:
<num_domains>
<num_contexts>
<name_of_domain_1>
<path_to_name_file_domain_1>
.
.
.
<name_of_domain_n>
<path_to_name_file_domain_n>
<name_of_domain_i> -- <name_of_domain_j>
<path_to_fimi_file_of_context_i_j>
.
.
.
<name_of_domain_s> -- <name_of_domain_t>	
<path_to_fimi_file_of_context_s_t>

NAME FILE FORMAT:
each object name should be listed on a seperate line

FIMI FILE FORMAT:
This is a file format to represent a sparse binary matrix
Each line of the file corresponds to the (line_num+1)th row
On each are space seperated integers ,j, indicating the the (j+1)th column contains a one.

For example a 3 x 5 binary matrix wtih a single one at the (1,1) position should have
3 lines and the single entry '0' as the first character.

An example file is displayed below as well!

EXAMPLE INPUT FILE:
2
1
nums
/Users/alqadaf/Research/Data/toy/num.names
atts
/Users/alqadaf/Research/Data/toy/atts.names
nums--atts
/Users/alqadaf/Research/Data/toy/num_atts.fimi


So this input file specifies 2 domains and a single context.
The first domain is called 'nums' and the second is 'atts'.
The context nums--atts consists of the domains 'nums' and 'atts' and is represented by the fimi file
'num_atts.fimi'. Since 'nums' is the first domains the rows of 'num_atts.fimi' correspond to the 'nums' domain
and columns correspond to the 'atts' domain.

Here are examples of the file. They are derived from the sample context at the wikipedia entry on Formal Concept Analysis
at: http://en.wikipedia.org/wiki/Formal_concept_analysis

num.names:

1
2
3
4
5
6
7
8
9
10

atts.names:

composite
even
odd
prime
square

num_atts.fimi:
2 4
1 3
2 3
0 1 4
2 3
0 1
2 3
0 1
0 2 4
0 1
###

Note: notice the ### at the end of the FIMI file. Add this to the end of the file to denote the end of the FIMI file.
BEWARE OF:
 1) CR characters from windows files! User must remove these
 2) Extra white lines or LF at the end of any of the files. The program
 	will interepet thse as extra row / columns of a domain or context
 3) FIMI indexing always start at 0, as described above.
 4) To specify a context in the input file, the same domain names specified in the input file
 	in the top lines must be used again to specify the context.
 5) The order of the domains when specifying a context matters (as described above).

 
 SAMPLE RUN OF NCLU:
 
 To enumerate all the concepts of nums--atts and output these concepts to files, run
 
 ./nclu -i nums.input -m 2 1 1 -o file
 assuming nums.input is the correct path this will produce files file.concepts and file.concepts.names
 
To enumerate all the concepts of nums--atts that have at least 3 numbers and 2 attributes then

 ./nclu -i nums.input -m 2 3 2 -o file



