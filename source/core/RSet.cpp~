#include <map>

#include "../../headers/core/RSet.h"

RSet::RSet(){
    size=0;
    id = -1;
    marked=false;
    quality=-1;
}
//RSet::RSet(int sz){
//    size = sz;
//    id=-1;
//    marked=false;
//    quality=-1;
//}
RSet::RSet( RSet * a){
    assert(a != NULL);
    DeepCopy(a);
}

RSet::~RSet(){}

    int RSet::Size(){return size;}
   int RSet::Id(){return id;}
   void RSet::SetId(int newId){id = newId;}
   void RSet::Output() {
       for( it= vals.begin(); it != vals.end() ; it++){
           cout<<(*it).first<<","<<(*it).second<<" ";
       }

   }
   void RSet::Output(ofstream& out){
       assert(out.is_open());
       for( it= vals.begin(); it != vals.end() ; it++){
           out<<(*it).first<<","<<(*it).second<<" ";
       }
   }
   void RSet::Output(ofstream& out, NameMap* nm){
       for( it= vals.begin(); it != vals.end() ; it++){
           out<<nm->GetName((*it).first)<<","<<(*it).second<<"\t";
       }
   }
 

    void RSet::Add(pair<int,double> a){
       assert(a.first >= 0);
       vals.insert(vals.end(),a);
       idxs.Add(a.first);
       size++;
   }
    void RSet::UpdateVal(int i,double val){
       assert(i >= 0);
       it = vals.find(i);
       if (it != vals.end()) 
           return;
       else{
          
           vals[i] = val;
       }
    } 
    
   void RSet::DeepCopy(RSet *a){
       assert(a !=NULL);
         vals.clear();
         idxs.Clear();

        for(it = a->vals.begin(); it != a->vals.end(); it++){
            vals.insert(vals.end(),(*it));
            idxs.Add((*it).first);
        }
        size = a->Size();
        id = a->Id();
        marked = a->marked;
        quality = a->GetQuality();
   }
   
   bool comp_pair_vals_greater (pair<int,double> a,pair<int,double> b){
            return a.second > b.second;
   }
   bool comp_pair_vals_less (pair<int,double> a,pair<int,double> b){
            return a.second < b.second;
   }
   bool comp_pair_idxs_greater (pair<int,double> a,pair<int,double> b){
            return a.first > b.first;
   }
   bool comp_pair_idxs_less (pair<int,double> a,pair<int,double> b){
            return a.first < b.first;
   }
   int RSet::GetMaxIdx(){
       if (size > 0)
        return idxs.At(size-1);
       else
           return -1;
   }
   pair<int,double> RSet::At(int idx){
       assert(idx >= 0);
       it = vals.find(idx);
       if (it != vals.end()) 
           return (*it);
       else{
           pair<int,double> ret;
           ret.first=-1;
           ret.second=-1;
           return ret;
       }
   }
   bool RSet::Contains(int idx){
      assert(idx >= 0);
      it = vals.find(idx);
      if (it != vals.end()) return true;
      return false;
     
    }

    IOSet *RSet::GetIdxs(){
        return new IOSet(&idxs);
    }
    RSet* RSet::GetSubspace(IOSet *idxs1){
        RSet *ret = new RSet;
        map<int,double>::iterator itt;
        for(int i=0; i < idxs1->Size(); i++){
            itt = vals.find(idxs1->At(i));
            if (itt != vals.end()) ret->Add((*itt));
        }
        return ret;
    }


    map<int,int> *RSet::GetRankIdxs(IOSet *theIdxs){
      map<int,int> *idxRanking = new map<int,int>();
        sort(theIdxs->GetBegin(),theIdxs->GetEnd(),IdxSorter(this));
        for(int i=0; i < theIdxs->Size(); i++)
            idxRanking->insert(pair<int,int>(theIdxs->At(i),i));
        return idxRanking;
    }
     map<int,int> * RSet::GetMapRankIdxsDesc(IOSet *theIdxs){
        map<int,int> *idxRanking = new map<int,int>();
        sort(theIdxs->GetBegin(),theIdxs->GetEnd(),IdxSorterDesc(this));
        for(int i=0; i < theIdxs->Size(); i++)
            idxRanking->insert(pair<int,int>(i,theIdxs->At(i)));
        return idxRanking;
     }
    
    
    pair<int,int> RSet::GetMinMaxSubspaceIdxs(IOSet *idxs){
        RSet *tmp = GetSubspace(idxs);
        pair<int,int> ret;
        if(tmp->Size() > 0){
            pair<int,double> max = tmp->GetMaxElement();
            pair<int,double> min = tmp->GetMinElement();
            ret.first=min.first;
            ret.second = max.first;
        }else{
            ret.first=-1;
            ret.second=-1;
        }
        delete tmp;
        return ret;
    }
   void RSet::Clear(){
       vals.clear();
       size=0;
   }
   void RSet::SetMarked(bool a){ marked = a;}
   bool RSet::GetMarked(){return marked;}
   void RSet::SetQuality(double q){quality = q;}
   double RSet::GetQuality(){return quality;}

   pair<int,double> RSet::GetMaxElement(){
       if (size > 0){
           it = vals.begin();
           pair<int,double> max = (*it);
           ++it;
           while(it != vals.end()){
               if( (*it).second > max.second){
                   max = (*it);
               }
               it++;
           }
           return max;
       }
       else {
           pair<int,double> ret;
           ret.first=-1;
           ret.second=-1;
           return ret;
       }
   }
   pair<int,double> RSet::GetMinElement(){
       if (size > 0){
           it = vals.begin();
           pair<int,double> min = (*it);
           ++it;
           while(it != vals.end()){
               if( (*it).second < min.second){
                   min = (*it);
               }
               it++;
           }
           return min;
       }
       else {
           pair<int,double> ret;
           ret.first=-1;
           ret.second=-1;
           return ret;
       }
   }
    double RSet::Sum(){
        double accum=0;
       for(it = vals.begin(); it != vals.end(); it++) accum += it->second;
        return accum;
    }
  
   double RSet::Mean(){
        return Sum()/(double)size;
   }
double RSet::Variance(){
    double qi=0,q1=0,ai=0,a1=0,sz=size;
    it = vals.begin();
    for(double i=0.0; i < size; i++){
        ai=a1+(1.0/(i+1.0))*(it->second-a1);
        qi=q1+(it->second-a1)*(it->second-ai);
        q1=qi;
        a1=ai;
        it++;
    }
    return (1.0/(size-1.0))*qi;
}

double RSet::Range(){
    return GetMaxElement().second - GetMinElement().second;
}

double RSet::Std_Dev(){
    return sqrt(Variance());

}
bool RSet_Compare_Sup(RSet *a, RSet *b){
    assert(a != NULL && b != NULL);
    return a->Size() > b->Size();
}

bool RSet_Compare_Id(RSet *a, RSet *b){
    assert(a != NULL && b != NULL);
    return a->Id() > b->Id();
}
bool RSet_Compare_Quality(RSet *a, RSet *b){
    assert(a != NULL && b != NULL);
    return a->GetQuality() > b->GetQuality();
}




